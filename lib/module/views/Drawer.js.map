{"version":3,"sources":["Drawer.tsx"],"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","PanGestureHandler","TapGestureHandler","State","Animated","DrawerProgressContext","Clock","Value","onChange","clockRunning","startClock","stopClock","interpolate","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","Drawer","PureComponent","props","drawerType","open","UNDETERMINED","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","undefined","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","manuallyTriggerSpring","offsetX","value","Boolean","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","e","setValue","layout","width","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","handleTapStateChange","overlay","opacity","inputRange","outputRange","zIndex","OS","handleDrawerLayout","container","nonPermanent","drawerPostion","create","backgroundColor","maxWidth","top","bottom","absoluteFillObject","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !right ? 'row-reverse' : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                drawerType !== 'permanent' && {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={isOpen ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress })}\n              {drawerType === 'permanent' ? null : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Animated.View\n                    style={[\n                      styles.overlay,\n                      {\n                        opacity: interpolate(progress, {\n                          inputRange: [PROGRESS_EPSILON, 1],\n                          outputRange: [0, 1],\n                        }),\n                        // We don't want the user to be able to press through the overlay when drawer is open\n                        // One approach is to adjust the pointerEvents based on the progress\n                        // But we can also send the overlay behind the screen, which works, and is much less code\n                        zIndex: cond(\n                          greaterThan(progress, PROGRESS_EPSILON),\n                          0,\n                          -1\n                        ),\n                      },\n                      overlayStyle,\n                    ]}\n                  />\n                </TapGestureHandler>\n              )}\n            </Animated.View>\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    right\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      {\n                        transform: [{ translateX: drawerTranslateX }],\n                        opacity: this.drawerOpacity,\n                      },\n                      right ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}